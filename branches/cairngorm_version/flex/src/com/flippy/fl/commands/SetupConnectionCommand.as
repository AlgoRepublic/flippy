package com.flippy.fl.commands {		/**	 */	 	import com.adobe.cairngorm.commands.ICommand;	import com.adobe.cairngorm.control.CairngormEvent;	import com.flippy.fl.business.NetConnectionDelegate;	import com.flippy.fl.events.SetupConnectionEvent;	import com.flippy.fl.model.FlippyModelLocator;	import com.flippy.fl.view.ChatBox;		import flash.events.*;	import flash.media.*;	import flash.net.*;		import mx.controls.Alert;	import mx.rpc.IResponder;			/**	 * Setup a new NetConnection with the RTMP server.	 * <p>The NetConnection is stored in the Model.</p>	 * 	 * @author Hendra	 */		public class SetupConnectionCommand implements ICommand, IResponder 	{		/**		* 		*/		[Bindable]		private var model : FlippyModelLocator = FlippyModelLocator.getInstance();	 		 	/**	 	 * 	 	 * @param cgEvent	 	 */	 	 		 	public function execute( cgEvent : CairngormEvent ) : void	    {			var event : SetupConnectionEvent = SetupConnectionEvent( cgEvent );			// Setup the permanent Delegate to manage the NetConnection.			model.main.bncDelegate = new NetConnectionDelegate( this );		}				/**		 * 		 * The result method is called when the delegate receives 		 * a result from the service		 * 		 * @param event		 */				public function result(  event : Object  ) : void {			var info : Object = event.info;			var statusCode : String = info.code;			//			model.logger.logMessage("connection status code: " + statusCode, "SetupConnectionCommand" );			// default connected = false			model.main.bncConnected = false;			//			switch ( statusCode ) 			{				case "NetConnection.Connect.Success" :					//					model.main.bncConnected = true;					// Change the label of the Button so the connection can be closed.					model.logger.logMessage("Connected to server", "SetupConnectionCommand") ;					break;							case "NetConnection.Connect.Failed" :					//					serverDisconnect();					//					model.logger.logMessage("Connection to server failed", "SetupConnectionCommand");					break;									case "NetConnection.Connect.Closed" :					//					serverDisconnect();					//					model.logger.logMessage(	"Connection to server closed", "SetupConnectionCommand") ;					break;									case "NetConnection.Connect.InvalidApp" :					//					model.logger.logMessage("Application not found on server", "SetupConnectionCommand");					break;									case "NetConnection.Connect.AppShutDown" :					//					model.logger.logMessage("Application has been shutdown", "SetupConnectionCommand");					break;									case "NetConnection.Connect.Rejected" :					//					model.logger.logMessage("No permissions to connect to the application", "SetupConnectionCommand");					break;							default :				   // statements				   break;			}		}				/**		 * The fault method is called when the delegate receives a fault from the service		 * 		 * @param event		 */				public function fault(  event : Object  ) : void {			//			model.logger.logMessage( "fault: " + event.text + "", "SetupConnectionCommand");		}				/** 		 * SERVER CALLBACK METHODS		 */		 		public function onChatMessage(sessionId:int, senderUserName:String, theMessage:String, date:Date, isInfo:Boolean):void {			// create new chatbox here			model.logger.logMessage("got chat message from= " + senderUserName + "; msg= " + theMessage, this);			var cBox:ChatBox = (model.main.chatWindows[senderUserName] as ChatBox);			if (cBox != null) {				model.logger.logMessage("box already opened just give em message: " + senderUserName + "> " + theMessage, this);				// already open, just give message				cBox.onMessage(sessionId, senderUserName, theMessage, date);			} else {				model.logger.logMessage("box not exists! create and give em message: " + senderUserName + "> " + theMessage, this);				// create new chatbox				cBox = model.main.chatPanel.addChatBox(senderUserName, false);				// give message				cBox.onMessage(sessionId, senderUserName, theMessage, date); 			}		}				public function onKickDoubleLogon():void {			Alert.show("Someone else login using the same username");			model.main.mainScreenState = model.main.MAIN_LOGIN_SCREEN;		}				public function onKickByModerator():void {			Alert.show("You are kicked by the moderator");			model.main.mainScreenState = model.main.MAIN_LOGIN_SCREEN;		}				/**		 * 		 * 		 */				private function serverDisconnect() : void 		{			// TODO: TRY TO RECONNECT AND LOAD PREVIOUS STATE			model.main.bncConnected = false;			model.logger.logMessage("server disconnected", "SetupConnectionCommand");		}	}}