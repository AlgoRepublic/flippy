<?xml version="1.0" encoding="utf-8"?>
<flexlib:SuperTabNavigator xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:flexlib="flexlib.containers.*" width="100%" height="100%" creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import com.flippy.fl.model.Logger;
			import com.flippy.fl.model.Main;
			import com.flippy.fl.model.FlippyModelLocator;
			import flexlib.controls.SuperTabBar;
			import mx.utils.StringUtil;
			import mx.binding.utils.BindingUtils;
			import flexlib.controls.tabBarClasses.SuperTab;
			import mx.core.UIComponent;
			import flexlib.events.SuperTabEvent;
			import mx.events.ItemClickEvent;
			import mx.controls.Alert;

			public var sessionId:int;
			public var userName:String;

			public var model:FlippyModelLocator = FlippyModelLocator.getInstance();
			public var main:Main = model.main;
			public var logger:Logger = model.logger;
			
			// --- private vars
			
			// --- icons
			[Embed(source="../assets/collapsed.gif")]
			private var document_icon:Class;
			
			[Embed(source="../assets/expanded.gif")]
			private var home_icon:Class;
			
			public function init():void {
				// init tab bar
				tabBar.addEventListener(SuperTabEvent.TAB_CLOSE, onTabClose);
				closePolicy = SuperTab.CLOSE_ALWAYS;
			
				main.chatPanel = this;
			
				// create non closable broadcast tab	
				addChatBox("Public Chat", true); 
				
				callLater(initNonClosableTab);
			}
			
			private function initNonClosableTab():void {
				setClosePolicyForTab(0, SuperTab.CLOSE_NEVER);
			}
									
									
			public function onBroadcastMessage(sessionId:int, userName:String, msg:String, date:Date):void {
				// udpate
				(model.main.chatWindows["Public Chat"] as ChatBox).onBroadcastMessage(sessionId, userName, msg, date);
			}
			
			// ---------------- HELPER -----------------
			public function createChatBox(title:String, destUserName:String, isBroadcast:Boolean):ChatBox {
				var cBox:ChatBox = new ChatBox();
				cBox.title = title;
				cBox.destUserName = destUserName;
				cBox.broadcast = isBroadcast;
				cBox.chatPanel = this;
				
				return cBox;
			}
			
			public function addChatBox(title:String, isBroadcast:Boolean):ChatBox {
				var cb:ChatBox = createChatBox(title, title, isBroadcast);
				
				var childIdx:int = this.numChildren + 1;
				
				childIdx = addTab(cb, title);
				
				// add into window list
				model.main.chatWindows[title]=cb;
				
				this.selectedIndex = childIdx - 1 ;
				
				logger.logMessage("Creating chatbox with title: " + title+ "; tabIdx: " + childIdx, this);
				
				return cb;
			}
			
			private function addTab(child:ChatBox, lbl:String, icon:Class=null):int {
				if(lbl=="") lbl = "(Untitled)";
				
				var curNum:int = this.numChildren + 1;
				
				child.setStyle("closable", true);
				
				child.label = lbl;
				
				if(icon) {
					child.icon = icon;
				}
				else {
					child.icon = document_icon;
				}
				
				this.addChild(child);
				
				return curNum;
			}
			
			public function onTabClose(event:flexlib.events.SuperTabEvent):void {
				removeChatBox(this.getTabAt(event.tabIndex).label);
			}
			
			public function removeChatBox(topic:String):void {
				
				trace("Removing chatbox with label: " + topic);
				
//				if (topic != null) {
//					chatManager.unsubscribe(topic);
//					
//					boxList[topic] = null;
//					trace("chat box for topic: " + topic + " was removed eveal("+boxList[topic]+")");
//				} else {
//					trace("chat box with label " + topic + " does not exists");
//				}
			}
			
			
			public function disableTopic(topic:String, msg:String):void {
//				chatManager.disableTopic(topic, msg);
			}
			
			public function enableTopic(topic:String, msg:String):void {
//				chatManager.enableTopic(topic, msg);
			}
			
			
		]]>
	</mx:Script>
</flexlib:SuperTabNavigator>
