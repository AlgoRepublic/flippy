package com.flippy.fl.business{	/**	 *	 */	import flash.events.*;	import flash.net.*;		import mx.rpc.IResponder;		import com.flippy.fl.model.FlippyModelLocator;		/**	 * Instantiate once, because the instance is stored as singleton in Main model	 * 	 * @author Hendra	 * 	 */		public class NetConnectionDelegate	{			/**		* 		*/		private var model : FlippyModelLocator = FlippyModelLocator.getInstance();				/**		* 		*/				private var responder : IResponder;				/**		* 		*/				private var service : Object;				/**		*  ref to model.main.businessNc		*/				private var netConnection : NetConnection;				/**		 * 		 * @param res		 */				public function NetConnectionDelegate( res : IResponder )		{			netConnection = new NetConnection();			model.main.businessNc = netConnection;						// Listen and capture the NetConnection info and error events.			responder = res;		}				/**		 * 		 * @param uri		 * @param proxy		 * @param encoding		 */				public function connect( uri : String/*, proxy : String, encoding : uint */) : void		{			// Initialize the NetConnection in the model.			netConnection.client = responder;			// 			//netConnection.objectEncoding = encoding;			//netConnection.proxyType = proxy;			// Setup the NetConnection and listen for NetStatusEvent and SecurityErrorEvent events.			netConnection.addEventListener( NetStatusEvent.NET_STATUS, netStatus );			netConnection.addEventListener( AsyncErrorEvent.ASYNC_ERROR, netASyncError );			netConnection.addEventListener( SecurityErrorEvent.SECURITY_ERROR, netSecurityError );			netConnection.addEventListener( IOErrorEvent.IO_ERROR, netIOError );			// connect to server			try {				// Create connection with the server.				netConnection.connect( uri );			}			catch( e : ArgumentError ) 			{				// Invalid parameters.				switch ( e.errorID ) 				{					case 2004 :						//						trace( "Invalid server location: " + uri );						break;											default :					   //					   break;				}			}			}				/**		 * 		 * 		 */				public function close() : void		{			// Close the NetConnection.			netConnection.close();		}					/**		 * 		 * @param event		 */				protected function netStatus( event : NetStatusEvent ) : void 		{			// Pass NetStatusEvent to SetupConnectionCommand.			this.responder.result( event );		}				/**		 * 		 * @param event		 */				protected function netSecurityError( event : SecurityErrorEvent ) : void 		{			// Pass SecurityErrorEvent to SetupConnectionCommand.		    responder.fault( new SecurityErrorEvent ( SecurityErrorEvent.SECURITY_ERROR, false, true,		    										  "Security error - " + event.text ) );		}				/**		 * 		 * @param event		 */				protected function netIOError( event : IOErrorEvent ) : void 		{			// Pass IOErrorEvent to SetupConnectionCommand.			responder.fault( new IOErrorEvent ( IOErrorEvent.IO_ERROR, false, true, 							 "Input/output error - " + event.text ) );		}				/**		 * 		 * @param event		 */				protected function netASyncError( event : AsyncErrorEvent ) : void 		{			// Pass AsyncErrorEvent to SetupConnectionCommand.			responder.fault( new AsyncErrorEvent ( AsyncErrorEvent.ASYNC_ERROR, false, true,							 "Asynchronous code error - <i>" + event.error + "</i>" ) );		}    }}